#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug');
var http = require('http');
var config = require('../config.js');
var websocket = require('../common/websocket.js');
var fs = require("fs");
var https = require('https');

/**
 * Get port from environment and store in Express.
 */

var port = parseInt(process.env.PORT, 10) || config.config.port;
app.set('port', port);
process.on('uncaughtException', function (err) {

  console.log('Caught exception: ' + err);
  console.error(err.message);
});

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
var io = require('socket.io')(server);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.on('connection', websocket.socketOnConnection);
// io.set('authorization', function (handshakeData, callback) {
//   // 通过客户端的cookie字符串来获取其session数据
//   handshakeData.cookie = parseCookie(handshakeData.headers.cookie)
//   var connect_sid = handshakeData.cookie['connect.sid'];
//   if (connect_sid) {
//     storeMemory.get(connect_sid, function (error, session) {
//       if (error) {
//         // if we cannot grab a session, turn down the connection
//         callback(error.message, false);
//       }
//       else {
//         // save the session data and accept the connection
//         handshakeData.session = session;
//         callback(null, true);
//       }
//     });
//   }
//   else {
//     callback('nosession');
//  }
//});
/**
 * Create HTTPS Server
 */
// var sslPort = 443;
// var options = {
//   key: fs.readFileSync('./privatekey.key'),
//   cert: fs.readFileSync('./certificate.pem')
// }

// https.createServer(options, app).listen(sslPort, function () {
//   console.log('HTTPS Server is running on: https://www.01space.cn:%s', sslPort);
// });

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('Port ' + port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('Port ' + port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  debug('Listening on port ' + server.address().port);
}
